{"version":3,"sources":["scripts/main.js"],"names":["field","button","document","querySelector","messageStart","messageLose","messageWin","gameScore","gameField","cellsInRow","score","generateTile","flat","includes","r","Math","floor","random","c","tileValue","updateField","currentCell","rows","cells","innerText","classList","value","add","remove","replace","loseGame","removeEmptyTiles","row","filter","num","slide","hasEmptyCells","canMerge","length","newRow","push","slideLeft","slideRight","reverse","slideUp","col","slideDown","compareFields","a","b","addEventListener","textContent","e","preventDefault","pastField","JSON","parse","stringify","code"],"mappings":"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","file":"main.2fdc975b.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\nconst gameField = document.querySelector('.game-field');\nconst cellsInRow = 4;\nlet field;\nlet score = 0;\n\nbutton.addEventListener('click', () => {\n  button.classList.replace('start', 'restart');\n  button.innerText = 'Restart';\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  score = 0;\n  gameScore.textContent = score;\n  generateTile();\n  generateTile();\n});\n\nfunction generateTile() {\n  while (field.flat().includes(0)) {\n    const r = Math.floor(Math.random() * cellsInRow);\n    const c = Math.floor(Math.random() * cellsInRow);\n\n    if (field[r][c] === 0) {\n      const tileValue = Math.random() < 0.8 ? 2 : 4;\n\n      field[r][c] = tileValue;\n      break;\n    }\n  }\n  updateField();\n}\n\nfunction updateField() {\n  for (let r = 0; r < cellsInRow; r++) {\n    for (let c = 0; c < cellsInRow; c++) {\n      const currentCell = gameField.rows[r].cells[c];\n\n      currentCell.innerText = '';\n      currentCell.classList.value = '';\n      currentCell.classList.add('field-cell');\n\n      if (field[r][c] > 0) {\n        currentCell.innerText = field[r][c];\n        currentCell.classList.add(`field-cell--${field[r][c]}`);\n      }\n\n      if (field[r][c] === 2048) {\n        messageWin.classList.remove('hidden');\n        button.classList.replace('restart', 'start');\n      }\n    }\n  }\n\n  if (loseGame()) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction removeEmptyTiles(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  const hasEmptyCells = field.flat().includes(0);\n  let canMerge = false;\n\n  for (let r = 0; r < row.length - 1; r++) {\n    if (row[r] === row[r + 1]) {\n      canMerge = true;\n      break;\n    }\n  }\n\n  if (!hasEmptyCells && !canMerge) {\n    return row;\n  }\n\n  let newRow = removeEmptyTiles(row);\n\n  for (let r = 0; r < newRow.length - 1; r++) {\n    if (newRow[r] === newRow[r + 1]) {\n      newRow[r] *= 2;\n      newRow[r + 1] = 0;\n      score += newRow[r];\n\n      gameScore.innerText = score;\n    }\n  }\n\n  newRow = removeEmptyTiles(newRow);\n\n  while (newRow.length < cellsInRow) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < cellsInRow; r++) {\n    let row = field[r];\n\n    row = slide(row);\n    field[r] = row;\n  }\n}\n\nfunction slideRight() {\n  for (let r = 0; r < cellsInRow; r++) {\n    let row = field[r].reverse();\n\n    row = slide(row).reverse();\n    field[r] = row;\n  }\n}\n\nfunction slideUp() {\n  for (let r = 0; r < cellsInRow; r++) {\n    let col = [field[0][r], field[1][r], field[2][r], field[3][r]];\n\n    col = slide(col);\n\n    for (let c = 0; c < cellsInRow; c++) {\n      field[c][r] = col[c];\n    }\n  }\n}\n\nfunction slideDown() {\n  for (let r = 0; r < cellsInRow; r++) {\n    let col = [field[0][r], field[1][r], field[2][r], field[3][r]].reverse();\n\n    col = slide(col).reverse();\n\n    for (let c = 0; c < cellsInRow; c++) {\n      field[c][r] = col[c];\n    }\n  }\n}\n\nfunction compareFields(a, b) {\n  for (let c = 0; c < cellsInRow; c++) {\n    for (let r = 0; r < cellsInRow; r++) {\n      if (a[c][r] !== b[c][r]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\ndocument.addEventListener('keyup', (e) => {\n  e.preventDefault();\n\n  const pastField = JSON.parse(JSON.stringify(field));\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      slideLeft();\n      break;\n    case 'ArrowRight':\n      slideRight();\n      break;\n    case 'ArrowUp':\n      slideUp();\n      break;\n    case 'ArrowDown':\n      slideDown();\n      break;\n  }\n\n  if (!compareFields(pastField, field)) {\n    generateTile();\n  }\n\n  updateField();\n});\n\nfunction loseGame() {\n  if (field.flat().includes(0)) {\n    return false;\n  }\n\n  for (let r = 0; r < cellsInRow; r++) {\n    for (let c = 0; c < cellsInRow; c++) {\n      if (field[r][c] === field[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let r = 0; r < cellsInRow - 1; r++) {\n    for (let c = 0; c < cellsInRow; c++) {\n      if (field[r][c] === field[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n"]}